apply plugin: 'com.android.library'
apply plugin: Plugins.kotlinAndroid
apply plugin: Plugins.kotlinKapt
apply plugin: Plugins.kotlinAndroidExtensions

android {
    compileSdkVersion Configs.compileSdkVersion

    defaultConfig {
        minSdkVersion Configs.minSdkVersion
        targetSdkVersion Configs.targetSdkVersion
        versionCode Configs.versionCode
        versionName Configs.versionName
        testInstrumentationRunner Configs.testInstrumentationRunner
        buildConfigField("String", "BASE_URL", "\"https://www.flickr.com/services/\"")
        buildConfigField("String", "API_KEY", "\"d4f26c71e3432baebb7db9e9594a7a29\"")

    }

    dataBinding {
        enabled = true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':common')


    implementation Dependencies.kotlin

    // dagger
    implementation Dependencies.dagger
    implementation Dependencies.daggerAndroid
    kapt Dependencies.daggerCompiler
    kapt Dependencies.daggerProcessor

    // Firebase
    implementation Dependencies.firebaseCrashlytics

    // Retrofit & Gson.
    implementation Dependencies.retrofit
    implementation Dependencies.retrofitGsonConverter
    implementation Dependencies.retrofitRxJavaAdapter
    implementation Dependencies.okHttp

    // Room db
    implementation Dependencies.roomRuntime
    kapt Dependencies.roomCompiler
    implementation Dependencies.roomKtx
    implementation Dependencies.roomRxJava

    // Testing
    testImplementation Dependencies.junit
    androidTestImplementation Dependencies.androidxTestRunner
    androidTestImplementation Dependencies.espressoCore
    testImplementation Dependencies.truthExt
    testImplementation Dependencies.truth
    testImplementation Dependencies.mockK
    testImplementation Dependencies.coreTesting
}
